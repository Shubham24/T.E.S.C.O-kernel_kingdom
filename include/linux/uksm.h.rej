--- include/linux/uksm.h
+++ include/linux/uksm.h
@@ -23,17 +23,17 @@
 /* must be done before linked to mm */
 extern void uksm_vma_add_new(struct vm_area_struct *vma);
 extern void uksm_remove_vma(struct vm_area_struct *vma);
-
-#define UKSM_SLOT_NEED_SORT	(1 << 0)
-#define UKSM_SLOT_NEED_RERAND 	(1 << 1)
-#define UKSM_SLOT_SCANNED     	(1 << 2) /* It's scanned in this round */
-#define UKSM_SLOT_FUL_SCANNED 	(1 << 3)
-#define UKSM_SLOT_IN_UKSM 	(1 << 4)
-
+ 
+#define UKSM_SLOT_NEED_SORT     (1 << 0)
+#define UKSM_SLOT_NEED_RERAND   (1 << 1)
+#define UKSM_SLOT_SCANNED       (1 << 2) /* It's scanned in this round */
+#define UKSM_SLOT_FUL_SCANNED   (1 << 3)
+#define UKSM_SLOT_IN_UKSM       (1 << 4)
+ 
 struct vma_slot {
- 	struct sradix_tree_node *snode;
- 	unsigned long sindex;
- 	
+        struct sradix_tree_node *snode;
+        unsigned long sindex;
+ 
         struct list_head slot_list;
         unsigned long fully_scanned_round;
         unsigned long dedup_num;
@@ -54,7 +54,7 @@
         unsigned long pages_bemerged;
  
         /* when it has page merged in this eval round */
- 	struct list_head dedup_list;
+        struct list_head dedup_list;
 };
  
 static inline void uksm_unmap_zero_page(pte_t pte)
@@ -83,19 +83,19 @@
  
 static inline int uksm_flags_can_scan(unsigned long vm_flags)
 {
- 	return !(vm_flags & (VM_PFNMAP | VM_IO  | VM_DONTEXPAND |
- 				  VM_RESERVED  | VM_HUGETLB | VM_INSERTPAGE |
- 				  VM_NONLINEAR | VM_MIXEDMAP | VM_SAO |
- 				  VM_SHARED  | VM_MAYSHARE | VM_GROWSUP
- 				  | VM_GROWSDOWN));
+        return !(vm_flags & (VM_PFNMAP | VM_IO  | VM_DONTEXPAND |
+                                  VM_RESERVED  | VM_HUGETLB | VM_INSERTPAGE |
+                                  VM_NONLINEAR | VM_MIXEDMAP | VM_SAO |
+                                  VM_SHARED  | VM_MAYSHARE | VM_GROWSUP
+                                  | VM_GROWSDOWN));
 }
-
+ 
 static inline void uksm_vm_flags_mod(unsigned long *vm_flags_p)
 {
-	if (uksm_flags_can_scan(*vm_flags_p))
- 		*vm_flags_p |= VM_MERGEABLE;
+        if (uksm_flags_can_scan(*vm_flags_p))
+                *vm_flags_p |= VM_MERGEABLE;
 }
-
+ 
 /*
  * Just a wrapper for BUG_ON for where ksm_zeropage must not be. TODO: it will
  * be removed when uksm zero page patch is stable enough.
@@ -128,16 +128,16 @@
 static inline void uksm_cow_pte(struct vm_area_struct *vma, pte_t pte)
 {
 }
-
+ 
 static inline int uksm_flags_can_scan(unsigned long vm_flags)
 {
- 	return 0;
+        return 0;
 }
-
+ 
 static inline void uksm_vm_flags_mod(unsigned long *vm_flags_p)
 {
 }
-
+ 
 static inline void uksm_bugon_zeropage(pte_t pte)
 {
 }
